{"version":3,"file":"fivethree-async-pipes.js.map","sources":["ng://@fivethree/async-pipes/lib/empty/empty.pipe.ts","ng://@fivethree/async-pipes/lib/empty/empty.module.ts","ng://@fivethree/async-pipes/lib/error/error.pipe.ts","ng://@fivethree/async-pipes/lib/error/error.module.ts","ng://@fivethree/async-pipes/lib/pending/pending.pipe.ts","ng://@fivethree/async-pipes/lib/pending/pending.module.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'empty',\n  pure: true\n})\nexport class EmptyPipe<T> implements PipeTransform {\n  transform(stream: Observable<T[] | string>): Observable<boolean> {\n    if (!stream) {\n      return;\n    }\n    return stream.pipe(\n      map((values: T[]) => values.length),\n      map((value: boolean | number) => !value)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmptyPipe } from './empty.pipe';\n\n@NgModule({\n  declarations: [EmptyPipe],\n  imports: [CommonModule],\n  exports: [EmptyPipe]\n})\nexport class EmptyModule {}\n","import { Observable, of } from 'rxjs';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { catchError, map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'error'\n})\nexport class ErrorPipe<T> implements PipeTransform {\n  transform(stream: Observable<T>): Observable<any | string> {\n    if (!stream) {\n      return;\n    }\n    return stream.pipe(\n      map(value => !value),\n      catchError(error => of(error))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ErrorPipe } from './error.pipe';\n\n@NgModule({\n  declarations: [ErrorPipe],\n  imports: [CommonModule],\n  exports: [ErrorPipe],\n  providers: []\n})\nexport class ErrorModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, startWith, catchError } from 'rxjs/operators';\n\n@Pipe({\n  name: 'pending',\n  pure: true\n})\nexport class PendingPipe<T> implements PipeTransform {\n  transform(stream: Observable<T>): Observable<boolean> {\n    if (!stream) {\n      return;\n    }\n    return stream.pipe(\n      startWith(false),\n      map(value => !value),\n      catchError(() => of(false))\n    );\n  }\n}\n","import { PendingPipe } from './pending.pipe';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [PendingPipe],\n  imports: [CommonModule],\n  exports: [PendingPipe],\n  providers: []\n})\nexport class PendingModule {}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;AAQA,MAAa,SAAS;;;;;IACpB,SAAS,CAAC,MAAgC;QACxC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,OAAO,MAAM,CAAC,IAAI,CAChB,GAAG;;;;QAAC,CAAC,MAAW,KAAK,MAAM,CAAC,MAAM,EAAC,EACnC,GAAG;;;;QAAC,CAAC,KAAuB,KAAK,CAAC,KAAK,EAAC,CACzC,CAAC;KACH;;;YAbF,IAAI,SAAC;gBACJ,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,IAAI;aACX;;;;;;;ACPD,MASa,WAAW;;;YALvB,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,SAAS,CAAC;gBACzB,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,OAAO,EAAE,CAAC,SAAS,CAAC;aACrB;;;;;;;ACRD;;;AAOA,MAAa,SAAS;;;;;IACpB,SAAS,CAAC,MAAqB;QAC7B,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,OAAO,MAAM,CAAC,IAAI,CAChB,GAAG;;;;QAAC,KAAK,IAAI,CAAC,KAAK,EAAC,EACpB,UAAU;;;;QAAC,KAAK,IAAI,EAAE,CAAC,KAAK,CAAC,EAAC,CAC/B,CAAC;KACH;;;YAZF,IAAI,SAAC;gBACJ,IAAI,EAAE,OAAO;aACd;;;;;;;ACND,MAUa,WAAW;;;YANvB,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,SAAS,CAAC;gBACzB,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,OAAO,EAAE,CAAC,SAAS,CAAC;gBACpB,SAAS,EAAE,EAAE;aACd;;;;;;;ACTD;;;AAQA,MAAa,WAAW;;;;;IACtB,SAAS,CAAC,MAAqB;QAC7B,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,OAAO,MAAM,CAAC,IAAI,CAChB,SAAS,CAAC,KAAK,CAAC,EAChB,GAAG;;;;QAAC,KAAK,IAAI,CAAC,KAAK,EAAC,EACpB,UAAU;;;QAAC,MAAM,EAAE,CAAC,KAAK,CAAC,EAAC,CAC5B,CAAC;KACH;;;YAdF,IAAI,SAAC;gBACJ,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,IAAI;aACX;;;;;;;ACPD,MAUa,aAAa;;;YANzB,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,WAAW,CAAC;gBAC3B,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,OAAO,EAAE,CAAC,WAAW,CAAC;gBACtB,SAAS,EAAE,EAAE;aACd;;;;;;;;;;;;;;;"}
