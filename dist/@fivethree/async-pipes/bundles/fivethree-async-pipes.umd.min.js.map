{"version":3,"sources":["ng://@fivethree/async-pipes/lib/empty/empty.pipe.ts","ng://@fivethree/async-pipes/lib/empty/empty.module.ts","ng://@fivethree/async-pipes/lib/error/error.pipe.ts","ng://@fivethree/async-pipes/lib/error/error.module.ts","ng://@fivethree/async-pipes/lib/pending/pending.pipe.ts","ng://@fivethree/async-pipes/lib/pending/pending.module.ts"],"names":["EmptyPipe","prototype","transform","stream","pipe","map","values","length","value","Pipe","args","name","pure","EmptyModule","NgModule","declarations","imports","CommonModule","exports","ErrorPipe","catchError","error","of","ErrorModule","providers","PendingPipe","startWith","PendingModule"],"mappings":"gdAIA,IAAAA,GAKEA,EAAAC,UAAAC,UAAA,SAAUC,GACR,GAAKA,EAGL,OAAOA,EAAOC,KACZC,EAAAA,IAAG,SAAEC,GAAgB,OAAAA,EAAOC,SAC5BF,EAAAA,IAAG,SAAEG,GAA4B,OAACA,0BAXvCC,EAAAA,KAAIC,KAAA,CAAC,CACJC,KAAM,QACNC,MAAM,MAYRZ,GAdA,SAAAA,KCJA,IAAAa,uBAICC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,CAACf,GACfgB,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAClB,OAEca,GAL1B,SAAAA,KCAA,IAAAM,GAIEA,EAAAlB,UAAAC,UAAA,SAAUC,GACR,GAAKA,EAGL,OAAOA,EAAOC,KACZC,EAAAA,IAAG,SAACG,GAAS,OAACA,IACdY,EAAAA,WAAU,SAACC,GAAS,OAAAC,EAAAA,GAAGD,2BAV5BZ,EAAAA,KAAIC,KAAA,CAAC,CACJC,KAAM,YAYRQ,GAbA,SAAAA,KCJA,IAAAI,uBAICT,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,CAACI,GACfH,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACC,GACVK,UAAW,OAEaD,GAN1B,SAAAA,KCAA,IAAAE,GAKEA,EAAAxB,UAAAC,UAAA,SAAUC,GACR,GAAKA,EAGL,OAAOA,EAAOC,KACZsB,EAAAA,WAAU,GACVrB,EAAAA,IAAG,SAACG,GAAS,OAACA,IACdY,EAAAA,WAAU,WAAO,OAAAE,EAAAA,IAAG,2BAZzBb,EAAAA,KAAIC,KAAA,CAAC,CACJC,KAAM,UACNC,MAAM,MAaRa,GAfA,SAAAA,KCJA,IAAAE,uBAICb,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,CAACU,GACfT,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACO,GACVD,UAAW,OAEeG,GAN5B,SAAAA","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'empty',\n  pure: true\n})\nexport class EmptyPipe<T> implements PipeTransform {\n  transform(stream: Observable<T[] | string>): Observable<boolean> {\n    if (!stream) {\n      return;\n    }\n    return stream.pipe(\n      map((values: T[]) => values.length),\n      map((value: boolean | number) => !value)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmptyPipe } from './empty.pipe';\n\n@NgModule({\n  declarations: [EmptyPipe],\n  imports: [CommonModule],\n  exports: [EmptyPipe]\n})\nexport class EmptyModule {}\n","import { Observable, of } from 'rxjs';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { catchError, map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'error'\n})\nexport class ErrorPipe<T> implements PipeTransform {\n  transform(stream: Observable<T>): Observable<any | string> {\n    if (!stream) {\n      return;\n    }\n    return stream.pipe(\n      map(value => !value),\n      catchError(error => of(error))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ErrorPipe } from './error.pipe';\n\n@NgModule({\n  declarations: [ErrorPipe],\n  imports: [CommonModule],\n  exports: [ErrorPipe],\n  providers: []\n})\nexport class ErrorModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, startWith, catchError } from 'rxjs/operators';\n\n@Pipe({\n  name: 'pending',\n  pure: true\n})\nexport class PendingPipe<T> implements PipeTransform {\n  transform(stream: Observable<T>): Observable<boolean> {\n    if (!stream) {\n      return;\n    }\n    return stream.pipe(\n      startWith(false),\n      map(value => !value),\n      catchError(() => of(false))\n    );\n  }\n}\n","import { PendingPipe } from './pending.pipe';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [PendingPipe],\n  imports: [CommonModule],\n  exports: [PendingPipe],\n  providers: []\n})\nexport class PendingModule {}\n"]}